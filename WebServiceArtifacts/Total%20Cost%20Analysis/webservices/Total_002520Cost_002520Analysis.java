
package webservices;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * 
 * Overview: Cost Modeling for Manufacturing Systems (Example)
 * 
 * This example models the total cost a fictitious fabricated metals manufacturing facility from its launch through its expected close-down in 10 years. The model outputs a full Income Statement and Cash Flow Statement across all 10  years as well as the overall net present value (NPV) and internal rate of return (IRR) for entire operation.
 * 
 * The model was built using components. And, by using the check-boxes on the Inputs tab, a user can perform "what-if" analysis to determine which milling machine provides the greatest financial benefits to the facility.
 * 
 * 
 * Assumptions
 * 
 * Land: 
 * Purchase price: $40,000
 * Expected selling price after 10 years: $110,000
 * 
 * Building: 
 * Purchase price: $120,000
 * Expected selling price after 10 years: $80,000
 * Depreciation: 39-year real property
 * 
 * Equipment:
 * Computer-Controlled Milling Machine:
 * R1220
 * Purchase price: $90,000
 * Installation cost: $10,000
 * Expected selling price after 10 years: $10,000
 * Production volume: 9,500 units per year (Minimum); 10,000 units per year (Most Likely); 11,000 units per year (Maximum)
 * Electricity usage: $0.15 per unit
 * Depreciation: 7-year MACRS property
 * 
 * R2337
 * Purchase price: $210,000
 * Installation cost: $10,000
 * Expected selling price after 10 years: $20,000
 * Production volume: 14,000 units per year (Minimum); 15,000 units per year (Most Likely); 16,000 units per year (Maximum)
 * Electricity usage: $0.25 per unit
 * Depreciation: 7-year MACRS property
 * 
 * Jigs and Dies:
 * Purchase price: $12,000
 * Installation cost: $0
 * Life cycle: 5 years (re-purchased as necessary at same price)
 * Depreciation: 3-year MACRS property
 * 
 * Materials:
 * Material cost: $2.20 per unit
 * 
 * Labor:
 * Labor cost: $22,000 per year
 * 
 * Other:
 * Other miscellaneous cost: $2,500 per year
 * 
 * Product:
 * The product being produced is the T55 Metal Gear.
 * We assume that the company can sell everything it produces at a price of $15 per unit.
 * 
 * Corporate Finance:
 * Minimum acceptable rate of return (MARR): 18%
 * Marginal tax rate: 40%
 * Capital gains tax rate: 40%
 * The facility is self-financed.
 * 
 * 
 * Problem Data Reference: Park, C. S., "Comtemporary Engineering Economics", 3rd ed., Prentice-Hall, 2002.
 * Data for the R2337 milling machine, the T55 metal gear product, and all stochastic elements were created by Vanguard Software Corporate.
 * 
 * 
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "Total%20Cost%20Analysis", targetNamespace = "http://webservices", wsdlLocation = "META-INF/wsdl/20146_United_States_Total_Cost_Analysis.wsdl")
public class Total_002520Cost_002520Analysis
    extends Service
{

    private final static URL TOTAL_002520COST_002520ANALYSIS_WSDL_LOCATION;
    private final static WebServiceException TOTAL_002520COST_002520ANALYSIS_EXCEPTION;
    private final static QName TOTAL_002520COST_002520ANALYSIS_QNAME = new QName("http://webservices", "Total%20Cost%20Analysis");

    static {
        TOTAL_002520COST_002520ANALYSIS_WSDL_LOCATION = webservices.Total_002520Cost_002520Analysis.class.getClassLoader().getResource("META-INF/wsdl/20146_United_States_Total_Cost_Analysis.wsdl");
        WebServiceException e = null;
        if (TOTAL_002520COST_002520ANALYSIS_WSDL_LOCATION == null) {
            e = new WebServiceException("Cannot find 'META-INF/wsdl/20146_United_States_Total_Cost_Analysis.wsdl' wsdl. Place the resource correctly in the classpath.");
        }
        TOTAL_002520COST_002520ANALYSIS_EXCEPTION = e;
    }

    public Total_002520Cost_002520Analysis() {
        super(__getWsdlLocation(), TOTAL_002520COST_002520ANALYSIS_QNAME);
    }

    public Total_002520Cost_002520Analysis(WebServiceFeature... features) {
        super(__getWsdlLocation(), TOTAL_002520COST_002520ANALYSIS_QNAME, features);
    }

    public Total_002520Cost_002520Analysis(URL wsdlLocation) {
        super(wsdlLocation, TOTAL_002520COST_002520ANALYSIS_QNAME);
    }

    public Total_002520Cost_002520Analysis(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, TOTAL_002520COST_002520ANALYSIS_QNAME, features);
    }

    public Total_002520Cost_002520Analysis(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Total_002520Cost_002520Analysis(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns ServicePortType
     */
    @WebEndpoint(name = "ServicePort")
    public ServicePortType getServicePort() {
        return super.getPort(new QName("http://webservices", "ServicePort"), ServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ServicePortType
     */
    @WebEndpoint(name = "ServicePort")
    public ServicePortType getServicePort(WebServiceFeature... features) {
        return super.getPort(new QName("http://webservices", "ServicePort"), ServicePortType.class, features);
    }

    private static URL __getWsdlLocation() {
        if (TOTAL_002520COST_002520ANALYSIS_EXCEPTION!= null) {
            throw TOTAL_002520COST_002520ANALYSIS_EXCEPTION;
        }
        return TOTAL_002520COST_002520ANALYSIS_WSDL_LOCATION;
    }

}
