
package cpdbns;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "cpdb_portType", targetNamespace = "cpdbns")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface CpdbPortType {


    /**
     * 
     * Provides the version of ConsensusPathDB which is the source for functional sets.
     * 			
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod(action = "cpdbns#getCpdbVersion")
    @WebResult(name = "cpdbVersion", targetNamespace = "cpdbns")
    @RequestWrapper(localName = "getCpdbVersion", targetNamespace = "cpdbns", className = "cpdbns.GetCpdbVersion")
    @ResponseWrapper(localName = "getCpdbVersionResponse", targetNamespace = "cpdbns", className = "cpdbns.GetCpdbVersionResponse")
    public String getCpdbVersion();

    /**
     * 
     * Provides a list of different types of accession numbers (e.g. 'uniprot') that are mappable to CPDB entity IDs.
     * Parameter 'entityType' should be either 'genes' or 'metabolites'.
     * 			
     * 
     * @param entityType
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod(action = "cpdbns#getAvailableAccessionTypes")
    @WebResult(name = "accType", targetNamespace = "cpdbns")
    @RequestWrapper(localName = "getAvailableAccessionTypes", targetNamespace = "cpdbns", className = "cpdbns.GetAvailableAccessionTypes")
    @ResponseWrapper(localName = "getAvailableAccessionTypesResponse", targetNamespace = "cpdbns", className = "cpdbns.GetAvailableAccessionTypesResponse")
    public List<String> getAvailableAccessionTypes(
        @WebParam(name = "entityType", targetNamespace = "cpdbns")
        String entityType);

    /**
     * 
     * Maps accession numbers of a valid type to CPDB entity IDs.
     * Parameter 'accType' is a valid accession number type (such as 'uniprot').
     * Parameter 'accNumber' is a list og accession numbers.
     * 			
     * 
     * @param accNumbers
     * @param accNumber
     * @param accType
     * @param cpdbId
     */
    @WebMethod(action = "cpdbns#mapAccessionNumbers")
    @RequestWrapper(localName = "mapAccessionNumbers", targetNamespace = "cpdbns", className = "cpdbns.MapAccessionNumbers")
    @ResponseWrapper(localName = "mapAccessionNumbersResponse", targetNamespace = "cpdbns", className = "cpdbns.MapAccessionNumbersResponse")
    public void mapAccessionNumbers(
        @WebParam(name = "accType", targetNamespace = "cpdbns")
        String accType,
        @WebParam(name = "accNumbers", targetNamespace = "cpdbns")
        List<String> accNumbers,
        @WebParam(name = "accNumber", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> accNumber,
        @WebParam(name = "cpdbId", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> cpdbId);

    /**
     * 
     * Provides a list of available functional set types such as pathways, GO categories, NESTs, ...
     * Parameter 'entityType' should be either 'genes' or 'metabolites'.
     * 			
     * 
     * @param entityType
     * @param description
     * @param fsetType
     */
    @WebMethod(action = "cpdbns#getAvailableFsetTypes")
    @RequestWrapper(localName = "getAvailableFsetTypes", targetNamespace = "cpdbns", className = "cpdbns.GetAvailableFsetTypes")
    @ResponseWrapper(localName = "getAvailableFsetTypesResponse", targetNamespace = "cpdbns", className = "cpdbns.GetAvailableFsetTypesResponse")
    public void getAvailableFsetTypes(
        @WebParam(name = "entityType", targetNamespace = "cpdbns")
        String entityType,
        @WebParam(name = "fsetType", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> fsetType,
        @WebParam(name = "description", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> description);

    /**
     * 
     * Provides the default background size for over-representation analysis. Note that it is accession number-specific.
     * 			
     * 
     * @param accType
     * @param fsetType
     * @return
     *     returns java.lang.String
     */
    @WebMethod(action = "cpdbns#getDefaultBackgroundSize")
    @WebResult(name = "bgSize", targetNamespace = "cpdbns")
    @RequestWrapper(localName = "getDefaultBackgroundSize", targetNamespace = "cpdbns", className = "cpdbns.GetDefaultBackgroundSize")
    @ResponseWrapper(localName = "getDefaultBackgroundSizeResponse", targetNamespace = "cpdbns", className = "cpdbns.GetDefaultBackgroundSizeResponse")
    public String getDefaultBackgroundSize(
        @WebParam(name = "fsetType", targetNamespace = "cpdbns")
        String fsetType,
        @WebParam(name = "accType", targetNamespace = "cpdbns")
        String accType);

    /**
     * 
     * Performs over-representation analysis of functional sets with provided physical entities.
     * Parameter 'entityType' should be either 'genes' or 'metabolites'.
     * Parameter 'fsetType' is the type of the functional sets to be tested (as obtained with the getAvailableFsetTypes function; e.g. 'P' for pathways).
     * Parameter 'cpdbIdsFg' is a list of interesting (e.g. differentially expressed) CPDB entity IDs (as obtained with the mapAccessionNumbers function).
     * Parameter 'cpdbIdsBg' is a list of CPDB entity IDs in the background. If empty, the default background is used (all different entities present in at least one functional set of the type fsetType and identifiable with accession numbers of type 'accType').
     * Parameter 'accType' is a valid accession number type. Should be specified if parameter 'cpdbIdsBg' is not set.
     * Parameter 'pThreshold' is a p-value threshold, only sets with significant over-representation below or equal to this threshold will be provided.
     * 			
     * 
     * @param allEntitiesNum
     * @param entityType
     * @param cpdbIdsFg
     * @param name
     * @param pValue
     * @param cpdbIdsBg
     * @param details
     * @param accType
     * @param overlappingEntitiesNum
     * @param qValue
     * @param fsetType
     * @param pThreshold
     */
    @WebMethod(action = "cpdbns#overRepresentationAnalysis")
    @RequestWrapper(localName = "overRepresentationAnalysis", targetNamespace = "cpdbns", className = "cpdbns.OverRepresentationAnalysis")
    @ResponseWrapper(localName = "overRepresentationAnalysisResponse", targetNamespace = "cpdbns", className = "cpdbns.OverRepresentationAnalysisResponse")
    public void overRepresentationAnalysis(
        @WebParam(name = "entityType", targetNamespace = "cpdbns")
        String entityType,
        @WebParam(name = "fsetType", targetNamespace = "cpdbns")
        String fsetType,
        @WebParam(name = "cpdbIdsFg", targetNamespace = "cpdbns")
        List<String> cpdbIdsFg,
        @WebParam(name = "cpdbIdsBg", targetNamespace = "cpdbns")
        List<String> cpdbIdsBg,
        @WebParam(name = "accType", targetNamespace = "cpdbns")
        String accType,
        @WebParam(name = "pThreshold", targetNamespace = "cpdbns")
        Float pThreshold,
        @WebParam(name = "name", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> name,
        @WebParam(name = "details", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> details,
        @WebParam(name = "overlappingEntitiesNum", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> overlappingEntitiesNum,
        @WebParam(name = "allEntitiesNum", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> allEntitiesNum,
        @WebParam(name = "pValue", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> pValue,
        @WebParam(name = "qValue", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> qValue);

    /**
     * 
     * Performs Wilcoxon enrichment analysis of functional sets with provided physical entities.
     * Parameter 'entityType' should be either 'genes' or 'metabolites'.
     * Parameter 'cpdbIdsMeasurements' is a list of strings of the type "cpdbId m1 m2" where cpdbId is a CPDB entity ID, while m1 and m2 are two measured values (e.g. "entrez-gene:123 0.2 1.5"). Alternatively, only one value can be provided denoting e.g. a fold change.
     * Parameter 'fsetType' is the type of the functional sets to be tested (as obtained with the getAvailableFsetTypes function; e.g. 'P' for pathways).
     * Parameter 'pThreshold' is a p-value threshold, only sets with significant enrichment below or equal to this threshold will be provided.
     * 			
     * 
     * @param allEntitiesNum
     * @param entityType
     * @param cpdbIdsMeasurements
     * @param name
     * @param pValue
     * @param details
     * @param measuredEntitiesNum
     * @param qValue
     * @param fsetType
     * @param pThreshold
     */
    @WebMethod(action = "cpdbns#enrichmentAnalysis")
    @RequestWrapper(localName = "enrichmentAnalysis", targetNamespace = "cpdbns", className = "cpdbns.EnrichmentAnalysis")
    @ResponseWrapper(localName = "enrichmentAnalysisResponse", targetNamespace = "cpdbns", className = "cpdbns.EnrichmentAnalysisResponse")
    public void enrichmentAnalysis(
        @WebParam(name = "entityType", targetNamespace = "cpdbns")
        String entityType,
        @WebParam(name = "fsetType", targetNamespace = "cpdbns")
        String fsetType,
        @WebParam(name = "cpdbIdsMeasurements", targetNamespace = "cpdbns")
        List<String> cpdbIdsMeasurements,
        @WebParam(name = "pThreshold", targetNamespace = "cpdbns")
        Float pThreshold,
        @WebParam(name = "name", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> name,
        @WebParam(name = "details", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> details,
        @WebParam(name = "measuredEntitiesNum", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> measuredEntitiesNum,
        @WebParam(name = "allEntitiesNum", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> allEntitiesNum,
        @WebParam(name = "pValue", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> pValue,
        @WebParam(name = "qValue", targetNamespace = "cpdbns", mode = WebParam.Mode.OUT)
        Holder<List<String>> qValue);

    /**
     * 
     * Returns all CPDB entity IDs in a functional set. Note that functional sets of type 'N' (NESTs) are protected and cannot be retrieved.
     * Parameter 'fsetId' is the ID of the functional set, parameter 'fsetType' is its type (e.g. 'P').
     * 			
     * 
     * @param fsetId
     * @param entsetType
     * @param fsetType
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod(action = "cpdbns#getCpdbIdsInFset")
    @WebResult(name = "cpdbIds", targetNamespace = "cpdbns")
    @RequestWrapper(localName = "getCpdbIdsInFset", targetNamespace = "cpdbns", className = "cpdbns.GetCpdbIdsInFset")
    @ResponseWrapper(localName = "getCpdbIdsInFsetResponse", targetNamespace = "cpdbns", className = "cpdbns.GetCpdbIdsInFsetResponse")
    public List<String> getCpdbIdsInFset(
        @WebParam(name = "fsetId", targetNamespace = "cpdbns")
        String fsetId,
        @WebParam(name = "fsetType", targetNamespace = "cpdbns")
        String fsetType,
        @WebParam(name = "entsetType", targetNamespace = "cpdbns")
        String entsetType);

}
