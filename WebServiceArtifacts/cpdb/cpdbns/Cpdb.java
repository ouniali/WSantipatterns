
package cpdbns;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "cpdb", targetNamespace = "cpdbns", wsdlLocation = "META-INF/wsdl/CPDB.wsdl")
public class Cpdb
    extends Service
{

    private final static URL CPDB_WSDL_LOCATION;
    private final static WebServiceException CPDB_EXCEPTION;
    private final static QName CPDB_QNAME = new QName("cpdbns", "cpdb");

    static {
        CPDB_WSDL_LOCATION = cpdbns.Cpdb.class.getClassLoader().getResource("META-INF/wsdl/CPDB.wsdl");
        WebServiceException e = null;
        if (CPDB_WSDL_LOCATION == null) {
            e = new WebServiceException("Cannot find 'META-INF/wsdl/CPDB.wsdl' wsdl. Place the resource correctly in the classpath.");
        }
        CPDB_EXCEPTION = e;
    }

    public Cpdb() {
        super(__getWsdlLocation(), CPDB_QNAME);
    }

    public Cpdb(WebServiceFeature... features) {
        super(__getWsdlLocation(), CPDB_QNAME, features);
    }

    public Cpdb(URL wsdlLocation) {
        super(wsdlLocation, CPDB_QNAME);
    }

    public Cpdb(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, CPDB_QNAME, features);
    }

    public Cpdb(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Cpdb(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns CpdbPortType
     */
    @WebEndpoint(name = "cpdb_port")
    public CpdbPortType getCpdbPort() {
        return super.getPort(new QName("cpdbns", "cpdb_port"), CpdbPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CpdbPortType
     */
    @WebEndpoint(name = "cpdb_port")
    public CpdbPortType getCpdbPort(WebServiceFeature... features) {
        return super.getPort(new QName("cpdbns", "cpdb_port"), CpdbPortType.class, features);
    }

    private static URL __getWsdlLocation() {
        if (CPDB_EXCEPTION!= null) {
            throw CPDB_EXCEPTION;
        }
        return CPDB_WSDL_LOCATION;
    }

}
